name: zip package and deploy to Octopus

on:
 workflow_dispatch:
 
jobs:
  lambda:
    name: octopus deploy
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2
    
      - name: Set Version
        run: echo "PACKAGE_VERSION=$(date +'%Y.%m.%d').$GITHUB_RUN_NUMBER" >> $GITHUB_ENV
        
      - name: Install Octopus Deploy CLI
        uses: OctopusDeploy/install-octopus-cli-action@v1
        with:
          version: latest
          
      - name: Set up JDK 1.17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: adopt
          
      - name: build app
        run: mvn clean install
        
      - name: set the version of app
        run: mvn versions:set -DnewVersion=$PACKAGE_VERSION
          
      - id: get_artifact
        name: Get Artifact Path
        run: |-
          # Find the largest WAR or JAR, and assume that was what we intended to build.
          echo "::set-output name=artifact::$(find target -type f \( -iname \*.jar -o -iname \*.war \) -printf "%p\n" | sort -n | head -1)"
        shell: bash
        
      - id: get_artifact_name
        name: Get Artifact Name
        run: |-
          # Get the filename without a path
          path="${{ steps.get_artifact.outputs.artifact }}"
          echo "::set-output name=artifact::${path##*/}"
        shell: bash
        
      - id: get_octopus_artifact
        name: Create Octopus Artifact and zip it
        run: |-
          # Octopus expects artifacts to have a specific file format
          file="${{ steps.get_artifact.outputs.artifact }}"
          extension="${file##*.}"
          octofile="mavenwebapp.$PACKAGE_VERSION.${extension}"
          cp ${file} ${octofile}
          # Zip the artifact file
          zip_file="${octofile}"
          zipped_file=zip -r ${zip_file}
          echo "::set-output name=artifact::${zippe_file}"
        shell: bash
          
      - name: Push packages to Octopus Deploy üêô
        uses: OctopusDeploy/push-package-action@v2
        env:
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_TOKEN }}
          OCTOPUS_HOST: ${{ secrets.OCTOPUS_SERVER_URL }}
        with:
          overwrite_mode: OverwriteExisting
          packages: ${{ steps.get_octopus_artifact.outputs.artifact }}
    
    
    
